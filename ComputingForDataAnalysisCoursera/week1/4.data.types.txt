30 min

Objects
object object object is everywhere in R

5 atomic (basic) classes of objects
character
numeric (real numbers)
complex
integer
logical
(all just numbers)

Many persons who are not conversant with mathemtical studies
imagine that because the business of Babbage's Analytical Engine' 
is to give its results in numerical notation, the 
nature of its processes must consequenctly be arithmetical
and numerical, rather than algebraical and analytical. This is an error.
The engine can arrange and combine its numerical quantities exactly as if
they were letters or any other general symbols, and in fact
it might bring out its results in algebraical notation, were provisions
made accordingly. Augusta Ada


Numbers
1 vs 1L
Inf is a special number, 1/0 1/Inf -Inf
NaN   undefined 0/0 or missing value

Attributes
object can have attributes
 names, dimnames
 dimensions (matrices, arrays)
 clas
 length
 other
 attributes() allows set/modify

what is the most impressive R expression(s) you've ever written?
plot(x,y)

x <- 5
x
[1] 5


vector: most basic object in R (cmp. List)
x <- 1:20
x
[1] 1 2 3 4 ...
[16] 16 17 18 19 20

what if x<- 1:Inf ?

Creaing Vectors using c() or vector()

Mixing objects in vector by automatic 'coercion'
y <- c("a", TRUE )
as.numeric(0:6)

what about
x <- c("a","b")
as.numeric(x)

Matrices are special type of vectors
m <- matrix(nrow=2,ncol=3)
dim(m)
[1] 2 3
attributes(m)
[1] 2 3

There is more than 1 way to create matrices.
Matrices are constructed column-wise (well, I always need a second thought on this)
m <- matrix(1:6, nrow=2, ncol = 3)


m <- 1:10
dim(m) <- c(2,5)  #confusing?exciting


Matrices can be created by binding vectors? (how about binding matrices?)


